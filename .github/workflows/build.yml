name: Build CI

on: [push, pull_request]

jobs:
  clippy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [riscv64, aarch64]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rust-src, clippy, rustfmt
    - name: Clippy
      run: make clippy ARCH=${{ matrix.arch }}
    - name: Check code format
      run: cargo fmt --all -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        arch: [riscv64, aarch64]
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        components: rust-src, llvm-tools-preview
    - uses: actions-rs/install@v0.1
      with:
        crate: cargo-binutils
        version: latest
        use-tool-cache: true
    - name: Build helloworld
      run: make ARCH=${{ matrix.arch }} APP=helloworld
    - name: Build memtest
      run: make ARCH=${{ matrix.arch }} APP=memtest
    - name: Build exception
      run: make ARCH=${{ matrix.arch }} APP=exception
    - name: Build task/yield
      run: make ARCH=${{ matrix.arch }} APP=yield
    - name: Build task/parallel
      run: make ARCH=${{ matrix.arch }} APP=parallel
    - name: Build task/sleep
      run: make ARCH=${{ matrix.arch }} APP=sleep
    - name: Build net/echoserver
      run: make ARCH=${{ matrix.arch }} APP=echoserver
    - name: Build net/httpclient
      run: make ARCH=${{ matrix.arch }} APP=httpclient
    - name: Build net/httpserver
      run: make ARCH=${{ matrix.arch }} APP=httpserver

    - name: Install musl toolchain
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          export MUSL_PATH="x86_64-linux-musl-cross"
        elif [ "${{ matrix.arch }}" = "aarch64" ]; then
          export MUSL_PATH="aarch64-linux-musl-cross"
        elif [ "${{ matrix.arch }}" = "riscv64" ]; then
          export MUSL_PATH="riscv64-linux-musl-cross"
        fi
        wget https://musl.cc/$MUSL_PATH.tgz
        tar -xf $MUSL_PATH.tgz
        mv $MUSL_PATH musl
    - name: Build c/helloworld
      run: |
        export PATH=$PATH:$PWD/musl/bin
        make ARCH=${{ matrix.arch }} APP=helloworld APP_LANG=c
    - name: Build c/memtest
      run: |
        export PATH=$PATH:$PWD/musl/bin
        make clean && make ARCH=${{ matrix.arch }} APP=memtest APP_LANG=c
    - name: Build c/sqlite3
      run: |
        export PATH=$PATH:$PWD/musl/bin
        make clean && make ARCH=${{ matrix.arch }} APP=sqlite3 APP_LANG=c
